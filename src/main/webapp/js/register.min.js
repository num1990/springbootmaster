$(document).ready(function () {
    $("#departmentCode").remoteChained({
        attribute: "code",
        parents: "#departmentProvince",
        url: $('body').attr('contextPath') + "/codes/businessNetwork",
        clear: true
    });

    $.validator.addMethod("phonecheck", function (value) {
        return /^1\d{10}$/.test(value)
    });

    jQuery.validator.addMethod("alphanumeric", function (value, element) {
        return this.optional(element) || /^[a-zA-Z0-9]+$/.test(value);
    });

    $.validator.addMethod("pwcheck", function (value) {
        return /^[A-Za-z0-9\d=!\-@._]*$/.test(value) // consists of only these
            && /[!\-@._]/.test(value) // has a sepecial letter
            && /[a-z]/.test(value) // has a lowercase letter
            && /[A-Z]/.test(value) // has a uppercase letter
            && /\d/.test(value) // has a digit
    });

    $("#customerNumber").inputmask({
        mask: "[C]{1,16}",
        greedy: false,
        definitions: {
            'C': {
                validator: "[A-Za-z0-9]",
                cardinality: 1,
                casing: "upper" //auto uppercasing
            }
        }
    });

    $("#phone").inputmask({
        mask: "X[9]{10}",
        greedy: false,
        definitions: {
            "X": {
                validator: "1",
                cardinality: 1,
                placeholder: '',
                greedy: false
            }
        }
    });

    $("#verificationCode").inputmask({
        mask: "[9]{1,12}",
        greedy: false
    });

    var contextPath = $('body').attr('contextPath');

    function verificationCode() {
        var flag = false;
        var phone = $('#phone').val();
        var verificationCode = $('#verificationCode').val();
        var verificationCodeError = $("#verificationCode").parent().last();
        $.ajax({
            url: contextPath + "/clients/register/validateVerificationCode",
            type: "GET", // 用GET方式传输
            async: false,
            data: {
                "phone": phone,
                "verificationCode": verificationCode
            },
            success: function (data) {
                if (data == "SUCCESS") {
                    flag = true;
                } else if (data == "LOCKED") {
                    verificationCodeError.after("<span id=\"verificationCode-error\" class=\"help-block error\">验证次数太多，请稍候再试！</span>").show();
                    // alert("验证次数太多，请稍候再试！");
                } else if (data == "FAILED") {
                    verificationCodeError.after("<span id=\"verificationCode-error\" class=\"help-block error\">验证失败，请校对您的验证码！</span>").show();
                } else {
                    console.log("未知错误!");
                }
            },
            error: function (e) {
                alert("验证失败,ERROR:" + e);
            }
        });
        return flag;
    }
    
    $("#register").validate({
        submitHandler: function (form) {
            if (!$("#identityInHandViewImageId").val()) {
                alert("请上传手持证件照！");
                return false;
            }
            var correct = verificationCode();
            if (!correct) {
                return false;
            }
            form.submit();
        },
        errorPlacement: function (error, element) {
            if (element.parent('.input-group').length || element.prop('type') === 'radio') {
                error.insertAfter(element.parent());
            } else if (element.parent('.input-group').length || element.prop('type') === 'checkbox') {
                error.appendTo('#checkboxError');
            } else {
                error.insertAfter(element);
            }
        },
        rules: {
            customerNumber: {
                alphanumeric: true,
                maxlength: 16
            },
            identityType: {
                required: true
            },
            identityNumber: {
                required: true,
                isIdCardAndValid: true
            },
            phone: {
                required: true,
                phonecheck: true
            },
            verificationCode: {
                required: true
            },
            businesses: {
                required: true
            },
            departmentProvince: {
                required: true
            },
            departmentCode: {
                required: true
            }
        },
        messages: {
            customerNumber: {
                alphanumeric: "请输入正确的客户号，必须是字母或者数字",
                maxlength: "客户号最多16位"
            },
            identityType: {
                required: "请选择证件类型"
            },
            identityNumber: {
                required: "请输入证件号码",
                isIdCardAndValid: "请输入合法的身份证号码",
                remote: "证件号码已被注册"
            },
            phone: {
                required: "请输入联系电话",
                phonecheck: "请输入正确的手机号码",
                remote: "手机号已被使用"
            },
            verificationCode: {
                required: "请输入验证码",
                remote: "验证码错误",
            },
            departmentProvince: {
                required: "请选择业务类型"
            },
            department: {
                required: "请选择省份"
            },
            departmentCode: {
                required: "请选择业务网点"
            }
        }
    });

    uploadSingleFile("identityInHandView", "identityInHandViewImageId", "6001"); //手持证件照

    $("#sendVerificationCodeButton").click(function () {
        var phone = $('#phone').val();
        if (phone.trim().length === 0 || !validPhone(phone)) {
            alert('请输入合法的手机号!');
        } else {
            $("#buttonFieldSet").prop("disabled", true);
            startTimer(60, $(this));
            sendVerificationCode(phone);
        }
    });
});

$.validator.addMethod("isIdCardAndValid", function (value, element) {
    var idType = $('input[name=identityType]:checked').val()
    if (idType == 'ID_CARD') {
        return isIdNumberValid(value);
    }
    return true;
}, "请输入正确的身份证号码");

function uploadSingleFile(divId, imageId, fileTypeCode) {
    uploadFile(divId, imageId, fileTypeCode, 1);
}

function uploadMultiFiles(divId, imageId, fileTypeCode) {
    uploadFile(divId, imageId, fileTypeCode, 10);
}

function uploadFile(divId, imageId, fileTypeCode, maxNumberOfFiles) {
    // Load existing files:
    $('#' + divId).addClass('fileupload-processing');

    $('#' + divId).fileupload({
        maxFileSize: 8000000, //8M
        url: $('#fileUploadUrl').val(), //TODO ADD FILE TYPE
        maxNumberOfFiles: maxNumberOfFiles,
        dropZone: $(this),
        submit: function (e, data) {
            data.formData = {
                customerNumber: $('#customerNumber').val(), //submit时来获取这些值
                identityType: $('input[name=identityType]:checked').val(),
                identityNumber: $('#identityNumber').val(),
                businessType: "SUITABILITY", //固定值
                imageTypeCode: fileTypeCode
            };

            if (!$("#register").valid()) { //validate form
                data.context.find('button').prop('disabled', false);
                $(this).find('.error').text("请先输入必填项");
                return false;
            }
        },
        always: function (e, data) {
            $(this).removeClass('fileupload-processing');
        },
        completed: function (e, data) {
            var hiddenImageIdInput = $('#' + imageId);
            if (maxNumberOfFiles > 1) { //multi files upload
                var existedId = hiddenImageIdInput.val();
                if (existedId) {
                    hiddenImageIdInput.val(existedId + "," + data.result.files[0].imageId);
                } else {
                    hiddenImageIdInput.val(data.result.files[0].imageId);
                }
            } else { //single file upload
                hiddenImageIdInput.val(data.result.files[0].imageId);
            }
        },
        destroyed: function (e, data) {
            var removedId = data.id;
            if (removedId) {
                var hiddenImageIdInput = $('#' + imageId);
                if (maxNumberOfFiles > 1) {
                    var imageIds = hiddenImageIdInput.val();
                    var idArr = imageIds.split(",");
                    var remainingIdArr = idArr.filter(isNotRemoved);
                    if (remainingIdArr.length > 1) {
                        hiddenImageIdInput.val(remainingIdArr.join(","));
                    } else if (remainingIdArr.length == 1) {
                        hiddenImageIdInput.val(remainingIdArr[0]);
                    } else {
                        hiddenImageIdInput.val("");
                    }

                    function isNotRemoved(id) {
                        return id != removedId;
                    }
                } else {
                    hiddenImageIdInput.val("");
                }
            }
        },
        failed: function (e, data) {
            console.log("data.errorThrown = " + data.errorThrown);
            console.log("data.textStatus = " + data.textStatus);
        }
    });
}

// validator setup
function isIdNumberValid(idNumber) {
    var num = getFromInputMask(idNumber);
    //console.log(num+","+ idNumber)
    var factorArr = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1);
    var parityBit = new Array("1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2");
    var varArray = new Array();
    var lngProduct = 0;
    var intCheckDigit;
    var intStrLen = num.length;
    var idNumber = num;
    // initialize
    if ((intStrLen != 15) && (intStrLen != 18)) {
        return false;
    }
    // check and set value
    for (i = 0; i < intStrLen; i++) {
        varArray[i] = idNumber.charAt(i);
        if ((varArray[i] < '0' || varArray[i] > '9') && (i != 17)) {
            return false;
        } else if (i < 17) {
            varArray[i] = varArray[i] * factorArr[i];
        }
    }
    if (intStrLen == 18) {
        //check date
        var date8 = idNumber.substring(6, 14);
        if (isDate8(date8) == false) {
            return false;
        }
        // calculate the sum of the products
        for (i = 0; i < 17; i++) {
            lngProduct = lngProduct + varArray[i];
        }
        // calculate the check digit
        intCheckDigit = parityBit[lngProduct % 11];
        // check last digit
        if (varArray[17] != intCheckDigit) {
            return false;
        }
    }
    else {        //length is 15
        //check date
        var date6 = idNumber.substring(6, 12);
        if (isDate6(date6) == false) {
            console.log(date6 + "," + date6)
            return false;
        }
    }
    return true;
}

function getFromInputMask(str) {
    var num = str.replace(/_/g, "");
    return num.replace(/-/g, "");
}

function getBirthDateFromId(idNumber) {
    var dateStr = "";
    if (idNumber.length == 15) {
        dateStr = "19" + idNumber.substring(6, 12);
        return dateStr.substring(0, 4) + "-" + dateStr.substring(4, 6) + "-" + dateStr.substring(6)
    }

    if (idNumber.length == 18) {
        dateStr = idNumber.substring(6, 14);
        return dateStr.substring(0, 4) + "-" + dateStr.substring(4, 6) + "-" + dateStr.substring(6)
    }
}

function getGenderFromId(idNumber) {
    var genderStr = "";
    if (idNumber.length == 15) {
        genderStr = idNumber.substr(14, 1);
    }

    if (idNumber.length == 18) {
        genderStr = idNumber.substr(16, 1);
    }

    if (genderStr % 2 == 0) {//female
        return 0;
    } else {
        return 1;//male
    }
}

function isDate6(sDate) {
    if (!/^[0-9]{6}$/.test(sDate)) {
        return false;
    }
    var year, month, day;
    year = "19" + sDate.substring(0, 2);
    month = sDate.substring(2, 4);
    day = sDate.substring(4, 6);
    var iaMonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if (year < 1700 || year > 2500) return false
    if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) iaMonthDays[1] = 29;
    if (month < 1 || month > 12) return false
    if (day < 1 || day > iaMonthDays[month - 1]) return false
    return true
}

function isDate8(sDate) {
    if (!/^[0-9]{8}$/.test(sDate)) {
        return false;
    }
    var year, month, day;
    year = sDate.substring(0, 4);
    month = sDate.substring(4, 6);
    day = sDate.substring(6, 8);
    var iaMonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if (year < 1700 || year > 2500) return false
    if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) iaMonthDays[1] = 29;
    if (month < 1 || month > 12) return false
    if (day < 1 || day > iaMonthDays[month - 1]) return false
    return true
}

function validPhone(phone) {
    return /^1\d{10}$/.test(phone)
}

function sendVerificationCode(phone) {
    var contextPath = $('body').attr('contextPath');
    $.ajax({
        url: contextPath + "/clients/register/verificationCode",
        type: "GET", // 用GET方式传输
        data: {"phone": phone},
        success: function (data) {
            if (!data) {
                alert("发送次数太多，请稍候再次发送！");
            }
        },
        error: function (e) {
            alert("发送失败,ERROR: " + e);
        }
    });
}

function startTimer(duration, display) {
    var countdown = setInterval(timer, 1000);
    // we don't want to wait a full second before the timer starts
    timer();
    var start = Date.now(),
        diff,
        seconds;

    function timer() {
        // get the number of seconds that have elapsed since
        // startTimer() was called
        diff = duration - (((Date.now() - start) / 1000) | 0);

        // does the same job as parseInt truncates the float
        // seconds = (diff % 60) | 0;
        seconds = diff | 0;

        seconds = seconds < 10 ? "0" + seconds : seconds;

        display.html(seconds + "S后重新发送");
        if (diff <= 0) {
            // add one second so that the count down starts at the full duration
            // example 05:00 not 04:59
            start = Date.now() + 1000;
            $("#buttonFieldSet").prop("disabled", false);
            display.html("获取验证码");
            clearTimeout(countdown);
        }
    };
}